"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import sys
import os
from datetime import timedelta
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

sys.path.insert(0, os.path.join(BASE_DIR, 'project/apps'))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)uh&md#fe+y=%v)oij@ty5jjphr&%(@*el_=a^%1legk)p#f=6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 1)

ALLOWED_HOSTS = ['*']
REDIS_URL = config("REDIS_URL")

# Application definition
PROJECT_APPS = (
    'user.apps.UserConfig',
    'category.apps.CategoryConfig',
    'gateway.apps.GatewayConfig',
    'vender',
    'payment.apps.PaymentConfig',
    'orders.apps.OrdersConfig',
    'product.apps.ProductConfig',
    'translations',    
    'rating',
    'chat',
    'blog',
    'page.apps.PageConfig',        
)

THIRD_PARTY_APPS = (
    'rest_framework',
    'rest_framework_simplejwt',
    'daphne',
    'silk',
    'channels',
    'drf_yasg',
    'django_filters',
    "phonenumber_field",
    'django.contrib.sessions',
    'django.contrib.contenttypes',
    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mptt',
    'corsheaders',        

)

APPS = (

) + PROJECT_APPS

SHARED_APPS = (
    'django_tenants',  # mandatory
    'tenants', # you must list the app where your tenant model resides in

) + THIRD_PARTY_APPS + APPS

TENANT_APPS = (    
) + THIRD_PARTY_APPS + APPS

TENANT_MODEL = "tenants.Client"
TENANT_DOMAIN_MODEL = "tenants.Domain"  # app.Model

INSTALLED_APPS = list(SHARED_APPS) + [app for app in TENANT_APPS if app not in SHARED_APPS]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = False

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django_tenants.middleware.main.TenantMainMiddleware',
    'django.middleware.security.SecurityMiddleware',    
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'silk.middleware.SilkyMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
 
# ALLOWED_ORIGINS = ['http://', 'https://']
# CSRF_TRUSTED_ORIGINS = ALLOWED_ORIGINS.copy()

CSRF_TRUSTED_ORIGINS = ['https://*-ecommerce.noot.ae', 'https://*.noot.ae', 'https://*.apexcode.info']

if DEBUG:
    CSRF_TRUSTED_ORIGINS += ['http://localhost:5000', 'http://127.0.0.1:5000', 'https://*.ngrok-free.app']

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient"
        },
        'KEY_FUNCTION': 'django_tenants.cache.make_key',
        'REVERSE_KEY_FUNCTION': 'django_tenants.cache.reverse_key',
    }
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=365),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1024),
}

ASGI_APPLICATION = 'project.asgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django_tenants.postgresql_backend',
        'NAME': config("db_name"),
        "USER": config("db_user"),
        "PASSWORD": config('db_passowrd'),
        "HOST": config("db_host"),  # set in docker-compose.yml
        "PORT": config('db_port', cast=int),  # default postgres port
    }
}

TENANT_HANDLER_USERNAME = config("TENANT_HANDLER_USERNAME")

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES' : ('rest_framework.permissions.IsAuthenticated',),
    'DEFAULT_AUTHENTICATION_CLASSES' : ('user.auth.TenantAuthentication',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 5,
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'EXCEPTION_HANDLER' : "utils.exception_handler.api_handler"
}

if not DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = (
        'rest_framework.renderers.JSONRenderer',
    )

DATABASE_ROUTERS = (
    'django_tenants.routers.TenantSyncRouter',
)


CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.pubsub.RedisPubSubChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
        },
    },
}

TENANT_LIMIT_SET_CALLS = False

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'daphne': {
#             'class': 'logging.FileHandler',
#             'filename': 'logs/daphne.log',
#         },
#     },
#     'loggers': {
#         'daphne': {
#             'handlers': ['daphne'],
#             'level': 'WARNING',
#             'propagate': False,
#         },
#     },
# }

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# STRIPE_PUBLISHABLE_KEY = config("STRIPE_PUBLISHABLE_KEY")
# STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY")
# STRIPE_WEBHOOK_SECRET = config("STRIPE_WEBHOOK_SECRET")

HOST = "http://localhost:8000"

if not DEBUG:
    SILKY_AUTHENTICATION = True  # User must login
    SILKY_AUTHORISATION = True  # User must have permissions
    SILKY_PERMISSIONS = lambda user: user.is_superuser


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

AUTH_USER_MODEL = 'user.User'

PHONENUMBER_DEFAULT_REGION = "AE"
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = 'static'

DEFAULT_LANG = "ar"
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Basic',
    },
}
#SHOW_PUBLIC_IF_NO_TENANT_FOUND = True

AUTHENTICATION_BACKENDS = ("user.auth_backend.CustomBackend",)

AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
DEFAULT_FILE_STORAGE = 'utils.storage.MyStorage'
AWS_QUERYSTRING_AUTH = False
AWS_S3_ENDPOINT_URL  = "https://s3.me-central-1.amazonaws.com"


CELERY_BROKER_URL = config('CELERY_BROKER_URL')
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_RESULT_BACKEND = ""
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'


EMAIL_BACKEND ='django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_USE_TLS = True
EMAIL_PORT=config("EMAIL_PORT", cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL= config('DEFAULT_FROM_EMAIL')

USE_CACHE = bool(config("USE_CACHE", cast=int))